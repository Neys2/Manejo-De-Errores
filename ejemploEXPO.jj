options { 

	JAVA_UNICODE_ESCAPE = true; 
	KEEP_LINE_COLUMN = true; 
	STATIC = false; 
} 

PARSER_BEGIN(ejemploEXPO) 
public class ejemploEXPO {  
	String errormsg="\n";  
	Token t;
	public static void main(String args[])  { 
		ejemploEXPO  compilador = new ejemploEXPO (System.in); 
		try { 
			compilador.Codigo(); 
		}catch( ParseException e ){ 
			String msg = e.toString();  
			System.out.println( "Expresión no válida "+msg);
		}
		catch( TokenMgrError e ) { 
			System.out.println( "Error de Token" );
		} 
		System.out.println(compilador.errormsg);
		//System.out.println("An"+"\u00e1"+"lisis l"+"\u00e9"+"xico ejecutado con "+"\u00e9"+"xito");  
	}    
}   
PARSER_END(ejemploEXPO)



SKIP :   
{  
	< " " | "\t" | "\r" | "\n" | "\r\n" >  //White space
	| <"#" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >  //Single-line comments
	| <"##"(~["/"])*  "#""#" >  //Multi-line comments
}  

TOKEN:   
{   
<INICIO: "compilar_coatl"> {System.out.println("INICIO  --> "+image);}  
|<FIN: "ejecutar_coatl">  {System.out.println("FIN  --> "+image);}  

|<ESCRIBIR: "muestra">{System.out.println("PRINT --> "+image+"\r\n");}
|<LEER:"recibir">{System.out.println("SCAN_DATA --> "+image+"\r\n");} 
}  

TOKEN:   
{   
<ParenIzq: "("> {System.out.println("Parentesis Izquierdo --> "+image);} 
|<ParenDer: ")"> {System.out.println("Parentesis Derecho --> "+image);}
|<SepIzq: "{"> {System.out.println("Delimitador Izquierdo --> "+image);} 
|<SepDer: "}"> {System.out.println("Delimitador Derecho --> "+image);} 
|<PuntoComa: ";"> {System.out.println("PUNTO Y COMA --> "+image);} 
|<COMA: ","> {System.out.println("COMA --> "+image);} 
}  

TOKEN:  
{  
<ASIGNACION: ":"> {System.out.println("Asignacion de valor --> "+image);}
}   

TOKEN: 
{
	<CADENAS: ("\""(~["\"","#","\n","\r","#","#","\r","\n"])*"\"")>{System.out.println("CADENA DE TEXTO --> "+image+"\r\n");}
}

TOKEN: 
{ 
   <ID_CADENA: "C_">{System.out.println("STRING --> "+image+"\r\n");} 
}   

TOKEN: 
{
	<IDENTIFICADOR:["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9"])*>{System.out.println("IDENTIFICADOR --> "+image+"\r\n");} 

}
// |<COMILLAS:"\"">{System.out.println("COMILLAS  --> "+image+"\r\n");}  

// | ["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"," "])* 

TOKEN: 
{ 
	<UNKNOW : ~[]>
}




void Codigo():{} // Gramatica inicial que contiene el cuerpo basico del codigo
{
(	LOOKAHEAD(2)
	ErrorA()
	| 
	<INICIO><SepIzq>  //Palabra reservada de inicio
	sentencias() // Conjunto de sentencias tipo; declaraciones, ciclos, decisiones, etc
	<SepDer><FIN><EOF> )// Palabra reservada de cierre)
	
} 


// EN ESTA AREA DEL CODIGO ESCRIBE LA GRAMÁTICA QUE PODRÍA RECONOCER EL ERROR

void ErrorA():{ 
}
{
	<INICIO>	{
	int columna = getToken(0).endColumn + 1;// {throw new ParseException("Expected B, found " + getToken(0).image + ".");}
	errormsg = "\nError sint"+"\u00e1"+"ctico en la  l"+"\u00ed"+"nea "+String.valueOf(getToken(0).beginLine)+" columna "+String.valueOf(columna)+" se esperaba '{'\r\n";
	}
	sentencias() // Conjunto de sentencias tipo; declaraciones, ciclos, decisiones, etc
	<SepDer><FIN><EOF>
}

 










//MÉTODOS UTILIZADOS EN LA GRAMÁTICA DEL EJEMPLO, ERES LIBRE DE ALTERARLO PERO NO ES NECESARIO
void sentencias():{ } 
{ 
// PuntoComa toen separado debido a la variabilidad del codigo
Declaracion()   // Declaracion de Variables k
| mostrar() //metodo mostrar en pantalla

}

void Declaracion():{}
{  
	<ID_CADENA> <IDENTIFICADOR> <ASIGNACION>  <CADENAS> <PuntoComa>  
} 

void mostrar():{}
{
    <ESCRIBIR>  <ParenIzq> (<IDENTIFICADOR>|<CADENAS>) <ParenDer> <PuntoComa>
}

 